// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: api/sam_api.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Sam_Signup_FullMethodName         = "/Sam/Signup"
	Sam_Login_FullMethodName          = "/Sam/Login"
	Sam_Logout_FullMethodName         = "/Sam/Logout"
	Sam_Authenticate_FullMethodName   = "/Sam/Authenticate"
	Sam_ChangePassword_FullMethodName = "/Sam/ChangePassword"
)

// SamClient is the client API for Sam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SamClient interface {
	Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*User, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Session, error)
	Logout(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*Blank, error)
	Authenticate(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*User, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*Blank, error)
}

type samClient struct {
	cc grpc.ClientConnInterface
}

func NewSamClient(cc grpc.ClientConnInterface) SamClient {
	return &samClient{cc}
}

func (c *samClient) Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, Sam_Signup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Session, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Session)
	err := c.cc.Invoke(ctx, Sam_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samClient) Logout(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*Blank, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Blank)
	err := c.cc.Invoke(ctx, Sam_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samClient) Authenticate(ctx context.Context, in *SessionId, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, Sam_Authenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*Blank, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Blank)
	err := c.cc.Invoke(ctx, Sam_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SamServer is the server API for Sam service.
// All implementations must embed UnimplementedSamServer
// for forward compatibility.
type SamServer interface {
	Signup(context.Context, *SignupRequest) (*User, error)
	Login(context.Context, *LoginRequest) (*Session, error)
	Logout(context.Context, *SessionId) (*Blank, error)
	Authenticate(context.Context, *SessionId) (*User, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*Blank, error)
	mustEmbedUnimplementedSamServer()
}

// UnimplementedSamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSamServer struct{}

func (UnimplementedSamServer) Signup(context.Context, *SignupRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signup not implemented")
}
func (UnimplementedSamServer) Login(context.Context, *LoginRequest) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSamServer) Logout(context.Context, *SessionId) (*Blank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedSamServer) Authenticate(context.Context, *SessionId) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedSamServer) ChangePassword(context.Context, *ChangePasswordRequest) (*Blank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedSamServer) mustEmbedUnimplementedSamServer() {}
func (UnimplementedSamServer) testEmbeddedByValue()             {}

// UnsafeSamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SamServer will
// result in compilation errors.
type UnsafeSamServer interface {
	mustEmbedUnimplementedSamServer()
}

func RegisterSamServer(s grpc.ServiceRegistrar, srv SamServer) {
	// If the following call pancis, it indicates UnimplementedSamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Sam_ServiceDesc, srv)
}

func _Sam_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sam_Signup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamServer).Signup(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sam_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sam_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sam_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sam_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamServer).Logout(ctx, req.(*SessionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sam_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sam_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamServer).Authenticate(ctx, req.(*SessionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sam_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sam_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sam_ServiceDesc is the grpc.ServiceDesc for Sam service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sam_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Sam",
	HandlerType: (*SamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signup",
			Handler:    _Sam_Signup_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Sam_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Sam_Logout_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _Sam_Authenticate_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Sam_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sam_api.proto",
}
